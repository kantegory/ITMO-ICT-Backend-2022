/// <reference types="node" />
import MariaDB, { FieldInfo } from 'mariadb';
import { SqlFrag } from './sql';
export declare class ConnectionPool {
    private readonly pool;
    constructor(pool: MariaDB.Pool);
    getConnection(): Promise<PoolConnection>;
    private _fwd;
    query: <TRecord = DefaultRecordType>(query: QueryParam) => Promise<QueryResult<TRecord>>;
    exec: (query: QueryParam) => Promise<MariaDB.UpsertResult>;
    row: <TRecord extends object = DefaultRecordType>(query: QueryParam) => Promise<TRecord | null>;
    col: <TValue = DefaultValueType>(query: SqlFrag) => Promise<TValue[]>;
    value: <TValue = DefaultValueType>(query: SqlFrag) => Promise<TValue | null>;
    exists: (query: SqlFrag) => Promise<boolean>;
    count: (query: SqlFrag) => Promise<number>;
    stream<TRecord extends object = DefaultRecordType>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined>;
    close(): Promise<void>;
    transaction<TReturn>(callback: (conn: PoolConnection) => Promise<TReturn>): Promise<TReturn>;
    transaction<TUnionResults = DefaultRecordType>(callback: SqlFrag[]): Promise<QueryResult<TUnionResults>[]>;
    get activeConnections(): number;
    get totalConnections(): number;
    get idleConnections(): number;
    get taskQueueSize(): number;
}
interface QueryOptions extends MariaDB.QueryConfig {
    sql: SqlFrag;
}
declare type QueryParam = SqlFrag | QueryOptions;
export declare const META = "meta";
export declare type DefaultValueType = string | number | Buffer | boolean | Date | bigint | null;
export declare type DefaultRecordType = Record<string, DefaultValueType>;
export declare type QueryResult<T = DefaultRecordType> = T[] & {
    [META]: FieldInfo[];
};
declare class PoolConnection {
    private readonly conn;
    constructor(conn: MariaDB.PoolConnection);
    query<TRecord = DefaultRecordType>(query: QueryParam): Promise<QueryResult<TRecord>>;
    exec: ((...args: Parameters<typeof PoolConnection.prototype.query>) => Promise<MariaDB.UpsertResult>);
    row<TRecord extends object = DefaultRecordType>(query: QueryParam): Promise<TRecord | null>;
    col<TValue = DefaultValueType>(query: SqlFrag): Promise<TValue[]>;
    value<TValue = DefaultValueType>(query: SqlFrag): Promise<TValue | null>;
    exists(query: SqlFrag): Promise<boolean>;
    count(query: SqlFrag): Promise<number>;
    stream<TRecord extends object = DefaultRecordType>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined>;
    release(): Promise<void>;
    beginTransaction(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    ping(): Promise<void>;
    changeUser(): Promise<void>;
    close(): Promise<void>;
    destroy(): void;
    get serverVersion(): string;
    get isValid(): boolean;
}
export declare function createPool(config: MariaDB.PoolConfig): Promise<ConnectionPool>;
export {};
