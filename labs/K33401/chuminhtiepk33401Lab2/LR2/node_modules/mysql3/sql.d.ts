/// <reference types="node" />
declare type PrimitiveValue = string | number | Buffer | bigint | boolean | null | Date;
declare type SingleValue = PrimitiveValue | SqlFrag;
declare type Value = SingleValue | SingleValue[];
declare type StrictDatabaseId = [database: string];
declare type LooseDatabaseId = StrictDatabaseId | string;
declare type StrictTableId = [database: string, table: string] | [table: string];
declare type LooseTableId = StrictTableId | string;
declare type TableId = LooseTableId | SqlFrag;
declare type StrictColumnId = [column: string] | [table: string, column: string] | [database: string, table: string, column: string];
declare type LooseColumnId = StrictColumnId | string;
declare type ColumnId = LooseColumnId | SqlFrag;
declare type LooseId = LooseColumnId;
declare type Id = LooseId | SqlFrag;
export declare class SqlFrag {
    private readonly sql;
    constructor(sql: string);
    toString(): void;
    toSqlString(): string;
}
export declare function isFrag(x: any): x is SqlFrag;
export declare function escapeValue(value: Value): SqlFrag;
export declare function sql(strings: TemplateStringsArray, ...values: Value[]): SqlFrag;
export declare function _escapeValue(value: Value): string;
export declare function _escapeIdLoose(id: Id): string;
export declare function _escapeIdStrict(id: Id): string;
export interface InsertOptions {
    onDuplicateKey?: DuplicateKey;
    ignore?: boolean;
}
export declare enum DuplicateKey {
    IGNORE = "ignore",
    UPDATE = "update"
}
declare type Columns<T> = keyof T & string;
declare type TableSchema<T> = Record<Columns<T>, Value>;
declare type ColumnValueTuple<T> = [column: Columns<T> | ColumnId, value: Value];
declare type InsertData<T extends TableSchema<T>> = T | ColumnValueTuple<T>[];
export declare namespace sql {
    function set<T extends TableSchema<T>>(fields: InsertData<T>): SqlFrag;
    function insert<T extends TableSchema<T>>(table: TableId, data: InsertData<T>, options?: InsertOptions): SqlFrag;
    function alias(fields: Record<string, ColumnId> | Array<[column: ColumnId, alias: string]>): SqlFrag;
    function raw(sqlString: string | SqlFrag): SqlFrag;
    function point(x: number, y: number): SqlFrag;
    function id(id: Id): SqlFrag;
    function db(id: LooseDatabaseId): SqlFrag;
    function tbl(id: LooseTableId): SqlFrag;
    function col(id: LooseColumnId): SqlFrag;
    function cols(...columns: Array<ColumnId>): SqlFrag;
    function columns(columns: Array<ColumnId>): SqlFrag;
    function values(values: Value[][]): SqlFrag;
}
export {};
